# 0-add_integer.txt

============================
How to use 0-add_integer.py
============================

This module defines a function that adds two integers ``add_integer(a, b=98)``

Usage
=====

``add_integer(...)`` returns the sum of its arguments. The value is equivalent to ``+`` operator.

::

    >>> add_integer = __import__("0-add_integer").add_integer
    >>> add_integer(4, 6)
    10

::

    >>> add_integer(-1, -4)
    -5

It also works with floating-point arguments but converts to int

::

    >>> add_integer(3.0, 2.7)
    5

It works with only one argument

::

    >>> add_integer(4)
    102

Non-Numbers
===========

``add_integer(...) works with either integers or floats as both arguments.
Passing an argument that is neither integer or float raises a TypeError:

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer("hi", 2)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(4, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

A TypeError is only raised for first argument if both arguments are neither
int nor float.

::

    >>> add_integer("one", "four")
    Traceback (most recent call last):
    TypeError: a must be an integer

It will fail if infinity or NaN is passed.

::

    >>> add_integer(1, float("inf"))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(1, float("nan"))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
